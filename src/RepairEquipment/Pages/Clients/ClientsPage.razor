@page "/clients"
@using RepairEquipment.Client.DbAccess
@using RepairEquipment.Client.Services.Interfaces
@using RepairEquipment.Shared.Models
@using RepairEquipment.Client.Services
@inject ISnackbar Snackbar
@inject IClientService _data
@inject IDialogService _dialogService

@if (Clients == null)
{
    <p><em>Loading ... </em></p>
}
else
{
    <MudPaper Square="true" Style="text-align: left" Class="pa-4 d-flex flex-grow-1">
        <MudContainer Class="align-self-stretch" Style="text-align: left">
            <MudBreadcrumbs Items="@_items" Separator=">"></MudBreadcrumbs>
        </MudContainer>
        <MudSpacer />
        <MudButton Style="margin-right: 15px" @onclick="InsertClient" StartIcon="@Icons.Material.Filled.Create" Variant="Variant.Filled" Color="Color.Success">CREATE</MudButton>
    </MudPaper>
    
    <MudTable Class="mud-fab-layout-content" @ref="_clientTable" Items="@Clients" Dense="@dense" Hover="@hover" Filter="new Func<ClientRecord, bool>(Filter)"
              CommitEditTooltip="Commit Edit" @bind-SelectedItem="_selectedItem" OnCommitEditClick="@(()=>UpdateClient(_selectedItem.ID))">

            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
            </ToolBarContent>
            
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Code</MudTh>
                <MudTh>RegistrationNr</MudTh>
                <MudTh>LegalAddress</MudTh>
                <MudTh>Phone</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>ContactPersonName</MudTh>
                <MudTh>ContactPersonAddress</MudTh>
                <MudTh>ContactPersonPhone</MudTh>
                <MudTh>ContactPersonEmail</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="ID">@context.ID</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="Name">@context.Name</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="Code">@context.Code</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="RegistrationNr">@context.RegistrationNr</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="LegalAddress">@context.LegalAddress</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="Phone">@context.Phone</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))"  DataLabel="Email">@context.Email</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="ContactPersonName">@context.ContactPersonName</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="ContactPersonAddress">@context.ContactPersonAddress</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="ContactPersonPhone">@context.ContactPersonPhone</MudTd>
                <MudTd @ondblclick="@(()=>UpdateClient(@context.ID))" DataLabel="ContactPersonEmail">@context.ContactPersonEmail</MudTd>
                <MudTd Style="text-align: right">    
                    <MudIconButton
                        Class="hoverable-item top-0 right-0 mt-3 mr-4"
                        Color="Color.Error"
                        Variant="Variant.Filled"
                        Icon="@Icons.Rounded.Delete"
                        @onclick="@(()=>DeleteClient(@context.ID))"/>               
                </MudTd>              
                <MudTd></MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    </div>

}


@code {

    MudTable<ClientRecord> _clientTable;
    private ClientRecord _selectedItem;
    private List<ClientRecord>? Clients;
    private ClientRecord Client = new ClientRecord();
    private string searchString = "";
    private bool hover = true;
    private bool dense = false;
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Clients", href: null, disabled: true),
    };


    protected override async Task OnInitializedAsync()
    {
        await GetClients();
    }

    private async Task GetClients() {
        Clients = await _data.GetClientsListAsync();
    }

    private async Task InsertClient()
    {
        var parameters = new DialogParameters();
        parameters.Add("Client", new ClientRecord());
        var dialog = _dialogService.Show<ClientDialog>("Create client", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ClientRecord client = result.Data as ClientRecord;

            await _data.InsertClientAsync(client);

            Clients.Add(client);

            Client = new ClientRecord();

            await GetClients();
        }
    }

    private async Task UpdateClient(int id)
    {
        var parameters = new DialogParameters { ["Client"] = _selectedItem };
        var dialog = _dialogService.Show<ClientDialog>("Edit Client", parameters);
        var result = await dialog.Result;

        if(!result.Cancelled) {
            ClientRecord? client = Clients.Where(x => x.ID == id).FirstOrDefault();
            await _data.UpdateClientAsync(client);
            Snackbar.Add($"#{client.ID} Client successfully updated");
            await GetClients();
        }
    }
    
    private async Task DeleteClient(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this record? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = _dialogService.Show<DeleteConfirmation>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled) {
            ClientRecord? client = Clients.Where(x => x.ID == id).FirstOrDefault();
            await _data.DeleteClientAsync(client);
            Snackbar.Add($"#{client.ID} Client successfully deleted");
            await GetClients();
        }
    }

    private bool Filter(ClientRecord client) 
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (Convert.ToString(client.ID).Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.RegistrationNr.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.LegalAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.Phone.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.ContactPersonName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.ContactPersonAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.ContactPersonPhone.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (client.ContactPersonEmail.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }



}