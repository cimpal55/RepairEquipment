@page "/"
@using Dapper
@using RepairEquipment.Client.DbAccess
@using RepairEquipment.Client.Services.Interfaces
@using RepairEquipment.Shared.Models
@using RepairEquipment.Client.Services
@inject IDocumentService _data
@inject IDialogService _dialogService

@if (Documents == null)
{
    <p><em>Loading ... </em></p>
}
else
{
    <MudPaper Square="true" Style="text-align: left" Class="pa-4 d-flex flex-grow-1">
        <MudText Typo="Typo.h6">Documents</MudText>
        <MudSpacer />
        <MudButton @onclick="InsertDocument" StartIcon="@Icons.Material.Filled.Create" Variant="Variant.Filled" Color="Color.Success">CREATE</MudButton>
        <MudButton @onclick="@(()=>DeleteDocument(selectedItem.ID))" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error">DELETE</MudButton>
    </MudPaper>

    <MudTable Class="mud-fab-layout-content" @ref="_employeeTable" Items="@Documents" Dense="@dense" Hover="@hover" Filter="new Func<DocumentRecord, bool>(Filter)"
          CommitEditTooltip="Commit Edit" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        </ToolBarContent>

        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>DocumentNumber</MudTh>
            <MudTh>Client</MudTh>
            <MudTh>Employee</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="ID">@context.ID</MudTd>
            <MudTd DataLabel="DocumentNumber">@context.DocumentNumber</MudTd>
            <MudTd DataLabel="Client">@context.Client</MudTd>
            <MudTd DataLabel="Employee">@context.Employee</MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    </div>


}


@code {

    MudTable<DocumentRecord> _employeeTable;
    private DocumentRecord selectedItem;
    private List<DocumentRecord>? Documents;
    private DocumentRecord Document = new DocumentRecord();
    private string searchString = "";
    private bool hover = true;
    private bool dense = false;

    protected override async Task OnInitializedAsync()
    {
        Documents = await _data.GetDocumentsListAsync();
    }


    private async Task InsertDocument()
    {

        var parameters = new DialogParameters();
        parameters.Add("Document", new DocumentRecord());
        var dialog = _dialogService.Show<DocumentDialog>("Create Document", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            DocumentRecord document = result.Data as DocumentRecord;

            await _data.InsertDocumentAsync(document);

            Documents.Add(document);

            Document = new DocumentRecord();

            Documents = await _data.GetDocumentsListAsync();
        }
    }

    private async Task UpdateDocument(int id)
    {
        var parameters = new DialogParameters { ["Document"] = selectedItem };
        var dialog = _dialogService.Show<DocumentDialog>("Edit Document", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            DocumentRecord obj = Documents.Where(x => x.ID == id).FirstOrDefault();
            await _data.UpdateDocumentAsync(obj);
            Documents = await _data.GetDocumentsListAsync();
        }

    }

    private async Task DeleteDocument(int id)
    {
        DocumentRecord obj = Documents.Where(x => x.ID == id).FirstOrDefault();
        await _data.DeleteDocumentAsync(obj);
        Documents = await _data.GetDocumentsListAsync();   
    }

    private bool Filter(DocumentRecord document)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (Convert.ToString(document.ID).Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (document.DocumentNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (Convert.ToString(document.ClientId).Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (document.Client.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (Convert.ToString(document.EmployeeId).Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }

}