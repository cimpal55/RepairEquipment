@page "/"
@using Dapper
@using RepairEquipment.Client.DbAccess
@using RepairEquipment.Client.Services.Interfaces
@using RepairEquipment.Shared.Models
@using RepairEquipment.Client.Services
@inject IDocumentService _data
@inject IDocumentListService _dataList
@inject IDialogService _dialogService
@inject IEmployeeService _employee
@inject IClientService _client
@inject IUtilsService _util
@inject ISnackbar Snackbar

@if (Documents == null)
{
    <p><em>Loading ... </em></p>
}
else
{
    <MudPaper Square="true" Class="pa-4 d-flex flex-grow-1">

        <MudText Typo="Typo.h6">Documents</MudText>
        
        <MudContainer Style="text-align: right; padding-right: unset; margin-right: 15px">
            <MudButton @onclick="InsertDocument" StartIcon="@Icons.Material.Filled.Create" Variant="Variant.Filled" Color="Color.Success">CREATE</MudButton>      
            <MudToolTipIconButtonEx
                Icon="@Icons.Filled.Login"
                Text="Incoming"/>       
            <MudToolTipIconButtonEx
                Icon="@Icons.Filled.Logout"
                Text="Outgoing"/>               
        </MudContainer>

    </MudPaper>

    <MudTable Class="mud-fab-layout-content" @ref="_documentTable" Items="@ListItem" Dense="@dense" Hover="@hover">
        <ToolBarContent>
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        </ToolBarContent>

        <HeaderContent>
            <MudTh>DocumentNumber</MudTh>
            <MudTh>Client</MudTh>
            <MudTh>Employee</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        
        <RowTemplate>
            <MudTd @ondblclick="@(()=>UpdateDocument(@context.Id))" DataLabel="DocumentNumber">@context.DocumentNumber</MudTd>
            <MudTd @ondblclick="@(()=>UpdateDocument(@context.Id))" DataLabel="Client">@context.Client</MudTd>
            <MudTd @ondblclick="@(()=>UpdateDocument(@context.Id))" DataLabel="Employee">@context.Employee</MudTd>
            <MudTd Style="text-align: right">
                
                <MudLink Href="">
                    <MudIconButton
                        Class="hoverable-item top-0 right-0 mt-3 mr-4"
                        Color="Color.Info"
                        Variant="Variant.Filled"
                        Icon="@Icons.Rounded.DensitySmall"/>
                </MudLink>
                
                <MudIconButton
                    Class="hoverable-item top-0 right-0 mt-3 mr-4"
                    Color="Color.Error"
                    Variant="Variant.Filled"
                    Icon="@Icons.Rounded.Delete"
                    @onclick="@(()=>DeleteDocument(@context.Id))"/>   
                    
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    </div>


}


@code {

    MudTable<DocumentsListItem>? _documentTable;
    private DocumentRecord? _selectedItem;
    private List<DocumentsListItem>? ListItem;
    private List<DocumentRecord>? Documents;
    private List<EmployeeRecord>? Employees;
    private List<ClientRecord>? Clients;
    private DocumentRecord Document = new DocumentRecord();
    private string searchString = "";
    private bool hover = true;
    private bool dense = false;

    protected override async Task OnInitializedAsync()
    {
        await GetDocuments();
        await GetEmployees();
        await GetClients();
    }

    private async Task GetDocuments() => ListItem = await _dataList.GetListItemsAsync().ConfigureAwait(false);

    private async Task GetEmployees() => Employees = await _employee.GetEmployeesListAsync();

    private async Task GetClients() => Clients = await _client.GetClientsListAsync();

    private async Task InsertDocument()
    {
        var parameters = new DialogParameters();
        parameters.Add("Document", new DocumentRecord());
        parameters.Add("Employees", Employees);
        parameters.Add("Clients", Clients);
        var dialog = _dialogService.Show<DocumentDialog>("Create Document", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            DocumentRecord? document = result.Data as DocumentRecord;

            await _data.InsertDocumentAsync(document);

            Documents.Add(document);

            Document = new DocumentRecord();
            Snackbar.Add("Document successfully added");
            await GetDocuments();
        }
    }

    private async Task UpdateDocument(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Document", _selectedItem);
        parameters.Add("Employees", Employees);
        parameters.Add("Clients", Clients);
        var dialog = _dialogService.Show<DocumentDialog>("Edit Document", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            DocumentRecord document = Documents.Where(x => x.Id == id).FirstOrDefault();
            await _data.UpdateDocumentAsync(document);
            Snackbar.Add($"#{document.Id} Document successfully updated");
            await GetDocuments();
        }

    }

    private async Task DeleteDocument(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this record? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = _dialogService.Show<DeleteConfirmation>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled) {
            DocumentRecord? document = Documents.Where(x => x.Id == id).FirstOrDefault();
            await _data.DeleteDocumentAsync(document);
            Snackbar.Add($"#{document.Id} Document successfully deleted");
            await GetDocuments();
        }
    }

    private bool Filter(DocumentRecord document)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (Convert.ToString(document.Id).Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (document.DocumentNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (document.Client.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (document.Employee.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }

}