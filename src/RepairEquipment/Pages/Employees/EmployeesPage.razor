@page "/employees"
@using Dapper
@using RepairEquipment.Client.DbAccess
@using RepairEquipment.Client.Services.Interfaces
@using RepairEquipment.Shared.Models
@using RepairEquipment.Client.Services
@inject IEmployeeService _data
@inject IDialogService _dialogService

@if (Employees == null)
{
    <p><em>Loading ... </em></p>
}
else
{
    <MudPaper Square="true" Style="text-align: left" Class="pa-4 d-flex flex-grow-1">
        <MudText Typo="Typo.h6">Employees</MudText>
        <MudSpacer />
        <MudButton @onclick="InsertEmployee" StartIcon="@Icons.Material.Filled.Create" Variant="Variant.Filled" Color="Color.Success">CREATE</MudButton>
        <MudButton @onclick="@(()=>DeleteEmployee(selectedItem.ID))" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error">DELETE</MudButton>
    </MudPaper>

    <MudTable Class="mud-fab-layout-content" @ref="_employeeTable" Items="@Employees" Dense="@dense" Hover="@hover" Filter="new Func<EmployeeRecord, bool>(Filter)"
              CommitEditTooltip="Commit Edit" @bind-SelectedItem="selectedItem">

            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
            </ToolBarContent>
            
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Surname</MudTh>
                <MudTh>Code</MudTh>
                <MudTh>PersonalCode</MudTh>
                <MudTh>Phone</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Address</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Id">
                    <div @ondblclick="@(()=>UpdateEmployee(@context.ID))">
                    @context.ID
                    </div></MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Surname">@context.Surname</MudTd>
                <MudTd DataLabel="Code">@context.Code</MudTd>
                <MudTd DataLabel="PersonalCode">@context.PersonalCode</MudTd>
                <MudTd DataLabel="Phone">@context.Phone</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Address">@context.Address</MudTd>     
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    </div>


}


@code {

    MudTable<EmployeeRecord> _employeeTable;
    private EmployeeRecord selectedItem;
    private List<EmployeeRecord>? Employees;
    private EmployeeRecord Employee = new EmployeeRecord();
    private string searchString = "";
    private bool hover = true;
    private bool dense = false;


    protected override async Task OnInitializedAsync()
    {
        Employees = await _data.GetEmployeesListAsync();
    }


    private async Task InsertEmployee()
    {

        var parameters = new DialogParameters();
        parameters.Add("Employee", new EmployeeRecord());
        var dialog = _dialogService.Show<EmployeeDialog>("Create Employee", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            EmployeeRecord employee = result.Data as EmployeeRecord;

            await _data.InsertEmployeeAsync(employee);

            Employees.Add(employee);

            Employee = new EmployeeRecord();

            Employees = await _data.GetEmployeesListAsync();
        }
    }

    private async Task UpdateEmployee(int id)
    {
        var parameters = new DialogParameters { ["Employee"] = Employee };
        var dialog = _dialogService.Show<EmployeeEditDialog>("Edit Employee", parameters);
        var result = await dialog.Result;

        if(!result.Cancelled) {
            EmployeeRecord obj = Employees.Where(x => x.ID == id).FirstOrDefault();
            await _data.UpdateEmployeeAsync(obj);
            Employees = await _data.GetEmployeesListAsync();
        }

    }

    private async Task DeleteEmployee(int id)
    {
        EmployeeRecord obj = Employees.Where(x => x.ID == id).FirstOrDefault();
        await _data.DeleteEmployeeAsync(obj);
        Employees = await _data.GetEmployeesListAsync();
    }

    private bool Filter(EmployeeRecord emp) 
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (emp.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Surname.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.PersonalCode.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Phone.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }



}