@page "/employees"
@using RepairEquipment.Client.DbAccess
@using RepairEquipment.Client.Services.Interfaces
@using RepairEquipment.Shared.Models
@using RepairEquipment.Client.Services
@inject IEmployeeService _data
@inject IConfiguration _config
@inject IDialogService _dialogService;

@if (Employees == null)
{
    <p><em>Loading ... </em></p>
}
else
{
    <div class="page-title">
        <h1>All employees</h1>
        <MudButton @onclick="InsertEmployee" Variant="Variant.Filled" Color="Color.Primary">CREATE</MudButton>
    </div>

    <MudTable Items="@Employees" Dense="true" Hover="true" Filter="new Func<Employee, bool>(Filter)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Employees</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"/>
            </ToolBarContent>
            
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Surname</MudTh>
                <MudTh>Code</MudTh>
                <MudTh>PersonalCode</MudTh>
                <MudTh>Phone</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Address</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Id">@context.ID</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Surname">@context.Surname</MudTd>
                <MudTd DataLabel="Code">@context.Code</MudTd>
                <MudTd DataLabel="PersonalCode">@context.PersonalCode</MudTd>
                <MudTd DataLabel="Phone">@context.Phone</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Address">@context.Address</MudTd>
                <MudTd DataLabel="">
                    <MudFab @onclick="@(()=>UpdateEmployee(context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit"
                            Size="Size.Small" IconSize="Size.Small"/>     
                    <MudFab @onclick="@(()=>DeleteEmployee(context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete"
                            Size="Size.Small" IconSize="Size.Small"/>            
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
    </MudTable>


}


@code {

    private List<Employee>? Employees;
    private Employee Employee = new Employee();
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        Employees = await _data.GetEmployeesList();
    }

    private void EmployeeDialog() {
        _dialogService.Show<EmployeeDialog>();
    }

    private async Task InsertEmployee()
    {

        var parameters = new DialogParameters();
        parameters.Add("Employee", new Employee());
        var dialog = _dialogService.Show<EmployeeDialog>("Create Employee", parameters);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Employee emp = new Employee
            {
                Name = Employee.Name,
                Surname = Employee.Surname,
                Code = Employee.Code,
                PersonalCode = Employee.PersonalCode,
                Phone = Employee.Phone,
                Email = Employee.Email,
                Address = Employee.Address,
            };

            await _data.InsertEmployeeAsync(emp);

            Employees.Add(emp);

            Employee = new Employee();
        }
    }

    private async Task UpdateEmployee(int id)
    {
        var employeeObj = new Employee();

    }

    private async Task DeleteEmployee(int id)
    {
        Employee obj = Employees.Where(x => x.ID == id).FirstOrDefault();
        await _data.DeleteEmployeeAsync(obj);
        Employees = await _data.GetEmployeesList();
    }

    private bool Filter(Employee emp) 
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (emp.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Surname.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.PersonalCode.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Phone.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (emp.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }



}